# This is a basic workflow to help you get started with Actions

name: test

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      value1:
        description: 'value1'
        required: false
        default: 'T-AUTO'
      bool-value1:
        description: 'bool-value'
        required: false
        default: true
        
  push:
    branches: ['main']       

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: macos-latest
    env:
      global1: GLOBAL
      has-value1: ${{ github.event.inputs.value1 == 'true' }}
      cast-has-value1: ${{ github.event.inputs.value1 == true }}
      true-value1: true
      false-value1: false
      true-value2: ${{ true }}
      false-value2: ${{ false }}
      one: 1
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: test-expression
        env:
          TAG_NAME: v${{ github.event.inputs.value1 }}
          
        run: |
          echo ${{ github.event.inputs.value1 }}
          echo ${{ github.event.inputs.value1 || 'DMMY' }}
          echo ${{ github.event.inputs.value1 && env.TAG_NAME }}
          echo ${{ (github.event.inputs.value1 && env.TAG_NAME) || 'DMMY' }}
          echo ${{ 'Release $TAG_NAME' }}
          echo ${{ github.event.inputs.value1 && 'Release $TAG_NAME' }}
          echo ${{ github.event.inputs.value1 && format('Release {0}', env.TAG_NAME) }}
          echo ${{ github.event.inputs.value1 && format('Release {0} {1}', env.global1, env.TAG_NAME) }}
          echo ${{ (env.has-value1 && format('HAD {0}', env.has-value1)) || format('NO {0}', env.has-value1) }}
          echo ${{ (env.cast-has-value1 && format('HAD {0}', env.cast-has-value1)) || format('NO {0}', env.cast-has-value1) }}
    
      - name: test-bool-value
        run: |
          echo ${{ ( true && format('TRUE {0}', env.true-value1)) || format('FALSE {0}', env.true-value1) }}
          echo ${{ ( env.true-value1 == true && 'result: true' ) || 'result: false' }}
          echo ${{ ( env.one == true && 'result: true' ) || 'result: false' }}
          echo ${{ ( 1 == true && 'result: true' ) || 'result: false' }}
        
          echo 1 ${{ (env.true-value1 && format('TRUE {0}', env.true-value1)) || format('FALSE {0}', env.true-value1) }}
          echo 2 ${{ (env.true-value1 == 'true' && format('TRUE {0}', env.true-value1)) || format('FALSE {0}', env.true-value1) }}
          echo 3 ${{ (env.true-value1 == env.true-value2 && format('TRUE {0}', env.true-value1)) || format('FALSE {0}', env.true-value1) }}
          
          echo 4 ${{ (env.true-value2 && format('TRUE {0}', env.true-value2)) || format('FALSE {0}', env.true-value2) }}
          echo 5 ${{ (env.true-value2 == 'true' && format('TRUE {0}', env.true-value2)) || format('FALSE {0}', env.true-value2) }}
          echo 6 ${{ (env.true-value2 == env.true-value2 && format('TRUE {0}', env.true-value2)) || format('FALSE {0}', env.true-value2) }}

          echo 7 ${{ ( false && format('TRUE {0}', env.false-value1)) || format('FALSE {0}', env.false-value1) }}

          echo 8 ${{ (env.false-value1 && format('TRUE {0}', env.false-value1)) || format('FALSE {0}', env.false-value1) }}
          echo 9 ${{ (env.false-value1 != 'true' && format('TRUE {0}', env.false-value1)) || format('FALSE {0}', env.false-value1) }}
          echo 10 ${{ (env.false-value1 == env.false-value2 && format('TRUE {0}', env.false-value1)) || format('FALSE {0}', env.false-value1) }}
          
          echo 11 ${{ (env.false-value2 && format('TRUE {0}', env.false-value2)) || format('FALSE {0}', env.false-value2) }}
          echo 12 ${{ (env.false-value2 != 'true' && format('TRUE {0}', env.false-value2)) || format('FALSE {0}', env.false-value2) }}
          echo 13 ${{ (env.false-value2 == env.false-value2 && format('TRUE {0}', env.false-value2)) || format('FALSE {0}', env.false-value2) }}
          
      - name: bool test-2
        env:
          true-value1: true
          true-value2: ${{ true }}
          false-value1: false
          false-value2: ${{ false }}
          one: 1
          zero: 0
        run: |
          # trueに対してtest

          echo ${{ (true && 'result: true') || 'result: false' }} # result: true
          echo ${{ env.true-value1 && format('result: true {0}', env.true-value1) }} # result: true true
          echo ${{ env.true-value1 == true }} # false
          echo ${{ env.true-value1 == 'true' }} # true
          echo ${{ env.true-value1 == env.true-value2 }} # true

          echo ${{ 1 == true }} # true
          echo ${{ env.one == true }} # true
          echo ${{ 1 == 'true' }} # false
          echo ${{ env.one == 1 }} # true
          echo ${{ env.one == '1' }} #

          # falseに対してtest   

          echo ${{ (false && 'result: true') || 'result: false' }} # result: false
          echo ${{ ('false' && 'result: true') || 'result: false' }} # result: true
          echo ${{ env.false-value1 && format('result: true {0}', env.false-value1) }}# result: true false

          echo ${{ 0 == false }} # true
          echo ${{ 0 == 'false' }} # false
          echo ${{ env.zero == false }} # true
          echo ${{ env.zero == 0 }} # true
          echo ${{ env.zero == '0' }} #

          echo ${{ env.false-value1 == false }} # false
          echo ${{ env.false-value1 == 'false' }} # true
          echo ${{ env.false-value1 == env.false-value2 }} # true
          
  test-action:
    runs-on: macos-latest
    env:
      global2: GLOBAL    
    steps:
      - name: Check out repository
        uses: actions/checkout@v2 
      - name: test
        env:
          TAG_NAME: v${{ github.event.inputs.value1 }}
        uses: ./.github/actions/myaction
        with:
          value1: $TAG_NAME
      - name: test2
        env:
          TAG_NAME: v${{ github.event.inputs.value1 }}
        uses: ./.github/actions/myaction
        with:
          value1: ${{ 'Release $TAG_NAME' }} 
      - name: test3
        env:
          TAG_NAME: v${{ github.event.inputs.value1 }}
        uses: ./.github/actions/myaction
        with:
          value1: ${{ format('Release {0} {1}', env.TAG_NAME, env.global2) }} 
          
          
          
